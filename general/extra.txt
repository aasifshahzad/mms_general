from datetime import datetime
from sqlmodel import Relationship, SQLModel, Field, Column
from sqlalchemy import String, Integer, DateTime
from typing import Optional

from sqlmodel import Field, SQLModel
from datetime import datetime

# Attendance Value


class AttendanceValueBase(SQLModel):
    attendance_value_id: int | None = Field(default=None, primary_key=True)
    created_at: datetime = Field(default=datetime.now(), nullable=False)


class AttendanceValue(AttendanceValueBase, table=True):
    attendance_value: str = Field(index=True, unique=True)

    # Relationship back to Attendance
    attendances: list["Attendance"] = Relationship(
        back_populates="attendance_value")


class AttendanceValueCreate(SQLModel):
    created_at: datetime = Field(default=datetime.now(), nullable=False)
    attendance_value: str = Field(index=True, unique=True)


class AttendanceValueResponse (AttendanceValueBase, SQLModel):
    attendance_value: str

# ****************************************************************************************
# Attendance Time


class AttendanceTimeBase(SQLModel):
    attendance_time_id: int | None = Field(default=None, primary_key=True)
    created_at: datetime = Field(default=datetime.now(), nullable=False)


class AttendanceTime(AttendanceTimeBase, table=True):
    attendance_time: str = Field(index=True, unique=True)

    # Relationship back to Attendance
    attendances: list["Attendance"] = Relationship(
        back_populates="attendance_time")


class AttendanceTimeCreate(SQLModel):
    created_at: datetime = Field(default=datetime.now(), nullable=False)
    attendance_time: str = Field(index=True, unique=True)


class AttendanceTimeResponse (AttendanceTimeBase, SQLModel):
    attendance_time: str


# ****************************************************************************************
# Teacher Names


class TeacherNamesBase(SQLModel):
    teacher_name_id: int | None = Field(default=None, primary_key=True)
    created_at: datetime = Field(default=datetime.now(), nullable=False)


class TeacherNames(TeacherNamesBase, table=True):
    teacher_name: str = Field(index=True, unique=True)

    # Relationship to Attendance
    attendances: list["Attendance"] = Relationship(
        back_populates="attendance_teacher")


class TeacherNamesCreate(SQLModel):
    created_at: datetime = Field(default=datetime.now(), nullable=False)
    teacher_name: str = Field(index=True, unique=True)


class TeacherNamesResponse(TeacherNamesBase, SQLModel):
    teacher_name: str


# ****************************************************************************************
# Class Names


class ClassNamesBase(SQLModel):
    class_name_id: int | None = Field(default=None, primary_key=True)
    created_at: datetime = Field(default=datetime.now(), nullable=False)


class ClassNames(ClassNamesBase, table=True):
    class_name: str = Field(index=True, unique=True)

    # Relationship back to Attendance
    attendances: list["Attendance"] = Relationship(
        back_populates="attendance_class")


class ClassNamesCreate(SQLModel):
    created_at: datetime = Field(default=datetime.now(), nullable=False)
    class_name: str = Field(index=True, unique=True)


class ClassNamesResponse(ClassNamesBase, SQLModel):
    class_name: str

# ****************************************************************************************
# Students


class StudentsBase(SQLModel):
    student_id: Optional[int] = Field(default=None, primary_key=True)


class Students(StudentsBase, table=True):
    student_name: str
    student_date_of_birth: datetime = Field(sa_column=Column(DateTime))
    student_gender: str
    student_age: str
    student_education: str
    student_class_name: str
    student_city: str
    student_address: str

    father_name: str
    father_occupation: str
    father_cnic: str
    father_cast_name: str
    father_contact: str

    # Relationship to Attendance
    attendances: list["Attendance"] = Relationship(
        back_populates="attendance_student")
    # attendances: list["Attendance"] = Relationship(
    #     back_populates="attendance_std_fname")


class StudentsCreate(SQLModel):
    student_name: str
    student_date_of_birth: datetime = Field(sa_column=Column(DateTime))
    student_gender: str
    student_age: str
    student_education: str
    student_class_name: str
    student_city: str
    student_address: str
    father_name: str
    father_occupation: str
    father_cnic: str
    father_cast_name: str
    father_contact: str


class StudentsResponse(StudentsBase):
    student_id: int  # Include the ID in the response model
    student_name: str
    student_date_of_birth: datetime = Field(sa_column=Column(DateTime))
    student_gender: str
    student_age: str
    student_education: str
    student_class_name: str
    student_city: str
    student_address: str

    father_name: str
    father_occupation: str
    father_cnic: str
    father_cast_name: str
    father_contact: str


class StudentsUpdate(SQLModel):
    student_name: Optional[str] = None
    student_date_of_birth: Optional[datetime] = Field(
        default=None, sa_column=Column(DateTime))
    student_gender: Optional[str] = None
    student_age: Optional[str] = None
    student_education: Optional[str] = None
    student_class_name: Optional[str] = None
    student_city: Optional[str] = None
    student_address: Optional[str] = None

    father_name: Optional[str] = None
    father_occupation: Optional[str] = None
    father_cnic: Optional[str] = None
    father_cast_name: Optional[str] = None
    father_contact: Optional[str] = None


# Attendance--------------------------------------------------------------------------------------------------
# Mark Student's Attendance

class AttendanceBase(SQLModel):
    attendance_id: int | None = Field(default=None, primary_key=True)
    created_at: datetime = Field(default=datetime.now(), nullable=False)
    updated_at: datetime = Field(default=datetime.now(), nullable=False)


class Attendance(AttendanceBase, table=True):
    attendance_date: datetime

    attendance_time_id: Optional[int] = Field(
        foreign_key="attendancetime.attendance_time_id")
    class_name_id: Optional[int] = Field(
        foreign_key="classnames.class_name_id")
    teacher_name_id: Optional[int] = Field(
        foreign_key="teachernames.teacher_name_id")
    student_id: Optional[int] = Field(foreign_key="students.student_id")
    attendance_value_id: Optional[int] = Field(
        foreign_key="attendancevalue.attendance_value_id")

    # Relationships
    attendance_time: Optional[AttendanceTime] = Relationship(
        back_populates="attendances")
    attendance_class: Optional[ClassNames] = Relationship(
        back_populates="attendances")
    attendance_teacher: Optional[TeacherNames] = Relationship(
        back_populates="attendances")
    attendance_student: Optional[Students] = Relationship(
        back_populates="attendances")
    attendance_std_fname: Optional[Students] = Relationship(
        back_populates="attendances")
    attendance_value: Optional[AttendanceValue] = Relationship(
        back_populates="attendances")


class AttendanceCreate(SQLModel):
    attendance_date: datetime
    attendance_time_id: int
    class_name_id: int
    teacher_name_id: int
    student_id: int
    attendance_value_id: int

class AttendanceResponse(AttendanceBase):
    attendance_date: datetime
    # Use relationship model instead of string
    attendance_time: Optional[AttendanceTime]
    attendance_class: Optional[ClassNames]
    attendance_teacher: Optional[TeacherNames]
    attendance_student: Optional[Students]
    attendance_value: Optional[AttendanceValue]
